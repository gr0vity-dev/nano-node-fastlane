name: All (Live Beta Test)
on:
  schedule:
    - cron: "0 0 * * 3,6"
  workflow_dispatch:
    inputs:
      repo:
        description: "repo"
      ci_tag:
        description: "tag to build"
        default: "develop" #use AUTO to run the CI build flow
        required: true
env:
  artifact: 1

jobs:
  prepare_build:
    runs-on: ubuntu-20.04
    outputs:
      CI_TAG: ${{ steps.tag_set.outputs.CI_TAG }}
      CI_VERSION_PRE_RELEASE: ${{ steps.tag_set.outputs.CI_VERSION_PRE_RELEASE }}
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          ref: ${{ (github.event.inputs.ci_tag == 'AUTO' || github.event.inputs.ci_tag == '') && 'develop' || github.event.inputs.ci_tag }}
          repository: ${{ github.event.inputs.repo || github.repository }}
      - name: Fetch the repository tags
        run: git fetch --tags
      - name: Set the tag and version
        id: tag_set
        run: |
          if [[ "${{ github.event.inputs.ci_tag }}" == "AUTO" ]] || [[ "${{ github.event.inputs.ci_tag }}" == "" ]]; then
            output_var_file="variable_list.txt"
            ci/actions/dev-build-tag-gen.sh -o "${output_var_file}"
            CI_TAG=$(grep 'build_tag' ${output_var_file} | cut -d= -f2)
            CI_VERSION_PRE_RELEASE=$(grep 'version_pre_release' ${output_var_file} | cut -d= -f2)            
          else
            CI_TAG=${{ github.event.inputs.ci_tag }}
            CI_VERSION_PRE_RELEASE='OFF'
          fi
          echo "CI_TAG=${CI_TAG}" >> $GITHUB_ENV
          echo "CI_VERSION_PRE_RELEASE=${CI_VERSION_PRE_RELEASE}" >> $GITHUB_ENV
          echo "CI_TAG=${CI_TAG}" >> $GITHUB_OUTPUT
          echo "CI_VERSION_PRE_RELEASE=${CI_VERSION_PRE_RELEASE}" >> $GITHUB_OUTPUT
      - name: Push the new tag
        run: |
          if [[ "${{ github.event.inputs.ci_tag }}" == "AUTO" ]] || [[ "${{ github.event.inputs.ci_tag }}" == "" ]]; then
            # Set git configuration
            git config user.name "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            # Create and push the tag
            git tag -a "${CI_TAG}" -m "This tag was automatically generated by the Beta workflow"
            git push origin "${CI_TAG}"
            fi
            

  osx_job:    
    needs: prepare_build
    runs-on: macOS-12
    timeout-minutes: 90
    strategy:
      matrix:
        network: ["TEST", "BETA", "LIVE"]
    steps:

      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          submodules: "recursive"
          ref: ${{ needs.prepare_build.outputs.CI_TAG }}
          repository: ${{ github.event.inputs.repo }}
      - name: Fetch Deps
        run: ci/actions/osx/install_deps.sh
      - name: Build Artifact
        run: NETWORK=${{ matrix.network }} CI_TAG="${{ needs.prepare_build.outputs.CI_TAG }}" CI_VERSION_PRE_RELEASE="${{ needs.prepare_build.outputs.CI_VERSION_PRE_RELEASE }}"  ci/build-deploy.sh "/tmp/qt/lib/cmake/Qt5";
      - name: Deploy Artifact
        run: ci/actions/deploy.sh
        env:
          NETWORK: ${{ matrix.network }}
          TAG: ${{ github.event.inputs.ci_tag }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_BUILD_DIRECTORY: ${{ secrets.S3_BUILD_DIRECTORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
  

  linux_job:
    needs: prepare_build
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      matrix:
        network: ["TEST", "BETA", "LIVE"]
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          submodules: "recursive"
          ref: ${{ needs.prepare_build.outputs.CI_TAG }}
          repository: ${{ github.event.inputs.repo }}
      - name: Fetch Deps
        env:
          COMPILER: gcc
        run: ci/actions/linux/install_deps.sh
      - name: Build Artifact
        run: docker run -v ${GITHUB_WORKSPACE}:/workspace nanocurrency/nano-env:gcc /bin/bash -c "cd /workspace && NETWORK=${{ matrix.network }} CI_TAG=${{ needs.prepare_build.outputs.CI_TAG }} CI_VERSION_PRE_RELEASE=${{ needs.prepare_build.outputs.CI_VERSION_PRE_RELEASE }} ci/build-deploy.sh /usr/lib/x86_64-linux-gnu/cmake/Qt5"
      - name: Deploy Artifact
        run: ci/actions/deploy.sh
        env:
          NETWORK: ${{ matrix.network }}
          TAG: ${{ github.event.inputs.ci_tag }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_BUILD_DIRECTORY: ${{ secrets.S3_BUILD_DIRECTORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  linux_rpm_job:
    needs: prepare_build
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      matrix:
        network: ["BETA", "LIVE"] #No path to build TEST exists ci/build-rhel.sh
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          submodules: "recursive"
          ref: "develop" #build-rhel.sh needs develop branch and then sets the tag 
          repository: ${{ github.event.inputs.repo }}
      - name: RockyLinux 8 Base
        run: ci/build-docker-image.sh docker/ci/Dockerfile-rhel nanocurrency/nano-env:rhel
      - name: Build Artifact
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/artifacts
          docker run -e NETWORK=${{ matrix.network }} -e TAG=${{ needs.prepare_build.outputs.CI_TAG }} -e REPO_TO_BUILD=${{ github.event.inputs.repo }} -e RPM_RELEASE=1 \
          -v ${GITHUB_WORKSPACE}:/workspace \
          -v ${GITHUB_WORKSPACE}/artifacts:/root/rpmbuild \
          nanocurrency/nano-env:rhel /bin/bash -c "ci/build-rhel.sh"
      - name: Deploy Artifacts
        run: ci/actions/deploy.sh
        env:
          LINUX_RPM: 1
          NETWORK: ${{ matrix.network }}
          # TAG: ${{ github.event.inputs.ci_tag }} # (not used in the deploy script if LINUX_RPM==1 )
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_BUILD_DIRECTORY: ${{ secrets.S3_BUILD_DIRECTORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

  linux_docker_job:
    needs: prepare_build
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    strategy:
      matrix:
        network: ["TEST", "BETA", "LIVE"]
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          submodules: "recursive"
          ref: ${{ needs.prepare_build.outputs.CI_TAG }}
          repository: ${{ github.event.inputs.repo }}
      - name: Fetch Deps
        env:
          COMPILER: gcc
        run: ci/actions/linux/install_deps.sh
      - name: Build Docker
        run: NETWORK=${{ matrix.network }} CI_TAG=${{ needs.prepare_build.outputs.CI_TAG }} CI_VERSION_PRE_RELEASE=${{ needs.prepare_build.outputs.CI_VERSION_PRE_RELEASE }} ci/actions/linux/docker-build.sh
      - name: Check if secrets.DOCKER_PASSWORD exists
        run: echo "DOCKER_PASSWORD_EXISTS=${{ secrets.DOCKER_PASSWORD != '' }}" >> $GITHUB_ENV  
      - name: Deploy Docker Hub
        if: env.DOCKER_PASSWORD_EXISTS == 'true'
        run: CI_TAG=${{ needs.prepare_build.outputs.CI_TAG }} ci/actions/linux/docker-deploy.sh
        env:
          DOCKER_HUB: ${{ secrets.DOCKER_HUB }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to ghcr.io
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a #v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy Docker (ghcr.io)
        run: ci/actions/linux/ghcr-deploy.sh

  windows_job:
    needs: prepare_build
    runs-on: windows-latest
    timeout-minutes: 90
    strategy:
      matrix:
        network: ["TEST", "BETA", "LIVE"]
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 #v3.1.0
        with:
          submodules: "recursive"
          ref: ${{ needs.prepare_build.outputs.CI_TAG }}
          repository: ${{ github.event.inputs.repo }}
      - name: Fetch Deps
        run: ci/actions/windows/install_deps.ps1
      - name: Build Artifact
        run: ci/actions/windows/build.ps1
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      - name: Deploy Artifact
        run: ci/actions/windows/deploy.ps1
        env:
          NETWORK: ${{ matrix.network }}
          TAG: ${{ github.event.inputs.ci_tag }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_BUILD_DIRECTORY: ${{ secrets.S3_BUILD_DIRECTORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
