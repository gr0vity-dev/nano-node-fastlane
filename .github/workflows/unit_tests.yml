name: Unit Tests

on: [push, pull_request]

jobs:
  macos_test:
    name: macOS [${{ matrix.BACKEND }}]
    strategy:
      fail-fast: false
      matrix:
        BACKEND: [lmdb, rocksdb]
        RELEASE:
          - ${{ startsWith(github.ref, 'refs/tags/') }}
    env:
      BACKEND: ${{ matrix.BACKEND }}
      RELEASE: ${{ matrix.RELEASE }}
      TEST_USE_ROCKSDB: ${{ matrix.BACKEND == 'rocksdb' && '1' || '0' }}
      DEADLINE_SCALE_FACTOR: ${{ matrix.BACKEND == 'rocksdb' && '2' || '1' }}
    runs-on: macos-12
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0 # Full history needed for restoring file timestamps

      - name: Restore Timestamps
        uses: ./.github/actions/restore-git-mtimes
        continue-on-error: true

      - name: Restore Build Cache
        uses: actions/cache/restore@v3
        continue-on-error: true
        with:
          path: build
          key: ${{ runner.os }}-build-cache

      - name: Fetch Deps
        run: TEST=1 ci/actions/osx/install_deps.sh

      - name: Build Tests
        run: ci/build-ci.sh "/tmp/qt/lib/cmake/Qt5";

      - name: Save Build Cache
        # Only save build cache from develop to avoid polluting it by other branches / PRs
        if: github.ref == 'refs/heads/develop' && success()
        uses: actions/cache/save@v3
        continue-on-error: true
        with:
          path: build
          key: ${{ runner.os }}-build-cache

      - name: Core Tests
        run: cd build && ../ci/tests/run-core-tests.sh

      - name: RPC Tests
        run: cd build && ../ci/tests/run-rpc-tests.sh

      - name: System Tests
        run: cd build && ../ci/tests/run-system-tests.sh

  linux_test:
    name: Linux [${{ matrix.BACKEND }} | ${{ matrix.COMPILER }}]
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        BACKEND: [lmdb, rocksdb]
        COMPILER: [gcc, clang]
        RELEASE:
          - ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-22.04
    env:
      COMPILER: ${{ matrix.COMPILER }}
      BACKEND: ${{ matrix.BACKEND }}
      RELEASE: ${{ matrix.RELEASE }}
      TEST_USE_ROCKSDB: ${{ matrix.BACKEND == 'rocksdb' && '1' || '0' }}
      DEADLINE_SCALE_FACTOR: ${{ matrix.BACKEND == 'rocksdb' && '2' || '1' }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0 # Full history needed for restoring file timestamps

      - name: Restore Timestamps
        uses: ./.github/actions/restore-git-mtimes
        continue-on-error: true

      - name: Restore Build Cache
        uses: actions/cache/restore@v3
        continue-on-error: true
        with:
          path: build
          key: ${{ runner.os }}-${{ env.COMPILER }}-build-cache

      - name: Fetch Deps
        run: ci/actions/linux/install_deps.sh

      - name: Build Tests
        run: docker run -e TEST_USE_ROCKSDB  -e RELEASE -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c "cd /workspace && ./ci/build-ci.sh /usr/lib/x86_64-linux-gnu/cmake/Qt5"

      - name: Save Build Cache
        # Only save build cache from develop to avoid polluting it by other branches / PRs
        if: github.ref == 'refs/heads/develop' && success()
        uses: actions/cache/save@v3
        continue-on-error: true
        with:
          path: build
          key: ${{ runner.os }}-${{ env.COMPILER }}-build-cache

      - name: Core Tests
        run: docker run -e RELEASE -e TEST_USE_ROCKSDB -e DEADLINE_SCALE_FACTOR -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c "cd /workspace/build && ../ci/tests/run-core-tests.sh"

      - name: RPC Tests
        run: docker run -e RELEASE -e TEST_USE_ROCKSDB -e DEADLINE_SCALE_FACTOR -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c "cd /workspace/build && ../ci/tests/run-rpc-tests.sh"

      - name: System Tests
        run: docker run -e RELEASE -e TEST_USE_ROCKSDB -e DEADLINE_SCALE_FACTOR -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c "cd /workspace/build && ../ci/tests/run-system-tests.sh"

      - name: QT Tests
        run: docker run -e RELEASE -e TEST_USE_ROCKSDB -e DEADLINE_SCALE_FACTOR -v ${PWD}:/workspace nanocurrency/nano-env:${{ matrix.COMPILER }} /bin/bash -c "cd /workspace/build && ../ci/tests/run-qt-tests.sh"

  windows_test:
    name: Windows [${{ matrix.BACKEND }}]
    timeout-minutes: 150
    strategy:
      fail-fast: false
      matrix:
        BACKEND: [lmdb, rocksdb]
        RELEASE:
          - ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: windows-latest
    env:
      BACKEND: ${{ matrix.BACKEND }}
      RELEASE: ${{ matrix.RELEASE }}
      TEST_USE_ROCKSDB: ${{ matrix.BACKEND == 'rocksdb' && '1' || '0' }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          fetch-depth: 0 # full history needed for restoring file timestamps

      - name: Restore Timestamps
        uses: ./.github/actions/restore-git-mtimes
        continue-on-error: true

      - name: Restore Build Cache
        uses: actions/cache/restore@v3
        continue-on-error: true
        with:
          path: build
          key: ${{ runner.os }}-build-cache

      - name: Windows Defender
        run: ci/actions/windows/disable_windows_defender.ps1

      - name: Fetch Deps
        run: ci/actions/windows/install_deps.ps1

      - name: Build Tests
        run: ci/actions/windows/build.ps1

      - name: Save Build Cache
        # only save build cache from develop to avoid polluting it by other branches / PRs
        if: github.ref == 'refs/heads/develop' && success()
        uses: actions/cache/save@v3
        continue-on-error: true
        with:
          path: build
          key: ${{ runner.os }}-build-cache

      - name: Run Tests [TEST_USE_ROCKSDB=${{ env.TEST_USE_ROCKSDB }}]
        run: ci/actions/windows/run.ps1
        env:
          DEADLINE_SCALE_FACTOR: ${{ env.TEST_USE_ROCKSDB == 1 && '2' || '1' }}
